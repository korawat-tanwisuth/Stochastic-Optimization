break
}
}
M
ans$x[1:num_beta]
MIQP <- function(X,y,num_beta,k,M){
model <- list()
sum_z_constr <- matrix(c(rep(0,num_beta),rep(1,num_beta)),nrow=1)
upper_m_constr <- cbind(diag(rep(1,num_beta)),-diag(rep(M,num_beta)))
lower_m_constr <- cbind(diag(rep(-1,num_beta)),-diag(rep(M,num_beta)))
model$A <- rbind(sum_z_constr,upper_m_constr,lower_m_constr)
model$obj <- c((-t(X)%*%y),rep(0,num_beta))
model$objcon <- t(y)%*%y
Q <- matrix(0,2*num_beta,2*num_beta)
Q[(1:num_beta),(1:num_beta)] <- t(X)%*%X
model$Q <- 0.5*Q
model$sense <- c(rep("<=",nrow(model$A)))
model$vtype <- c(rep("C",num_beta),rep("B",num_beta))
model$rhs <- c(k,rep(0,nrow(model$A)-1))
model$modelsense <- "min"
ans <- gurobi(model)
return(ans)
}
MIQP <- function(X,y,num_beta,k,M){
model <- list()
sum_z_constr <- matrix(c(rep(0,num_beta),rep(1,num_beta)),nrow=1)
upper_m_constr <- cbind(diag(rep(1,num_beta)),-diag(rep(M,num_beta)))
lower_m_constr <- cbind(diag(rep(-1,num_beta)),-diag(rep(M,num_beta)))
model$A <- rbind(sum_z_constr,upper_m_constr,lower_m_constr)
model$obj <- c((-t(X)%*%y),rep(0,num_beta))
model$objcon <- t(y)%*%y
Q <- matrix(0,2*num_beta,2*num_beta)
Q[(1:num_beta),(1:num_beta)] <- t(X)%*%X
model$Q <- 0.5*Q
model$sense <- c(rep("<=",nrow(model$A)))
model$vtype <- c(rep("C",num_beta),rep("B",num_beta))
model$rhs <- c(k,rep(0,nrow(model$A)-1))
model$modelsense <- "min"
ans <- gurobi(model)
return(ans)
}
done <- FALSE
num_beta <- 64
k <- 8
M <- 0.01
while(!done){
print("hi")
ans <- MIQP(X,y,num_beta,k,M)
if(abs(max(ans$x[1:num_beta])) >= M){
M <- 2*M
next
}
else{
break
}
}
ans$objval
ans$x[1:num_beta]
max(ans$x[1:num_beta])
M
done <- FALSE
num_beta <- 64
k <- 8
M <- 0.01
MIQP(X,y,num_beta,k,M)
M <- 0.02
MIQP(X,y,num_beta,k,M)
M <- 0.03
M <- 0.1
MIQP(X,y,num_beta,k,M)
M <- 0.9
MIQP(X,y,num_beta,k,M)
num_beta <- 64
k <- 8
M <- 0.01
while(!done){
print("hi")
ans <- MIQP(X,y,num_beta,k,M)
if(abs(max(ans$x[1:num_beta])) >= M){
M <- 2*M
next
}
else{
break
}
}
ans$x[1:num_beta]
load("data.Rdata")
library(glmnet)
library(gurobi)
df <- data.frame(cbind(X,y))
fit_lasso_cv <- cv.glmnet(X, y, alpha = 1)
lasso <- glmnet(X,y, alpha = 1, lambda = fit_lasso_cv$lambda.1se)
onese_lambda_coef<- coef(lasso)
length(which(onese_lambda_coef!=0))
MIQP <- function(X,y,num_beta,k,M){
model <- list()
sum_z_constr <- matrix(c(rep(0,num_beta),rep(1,num_beta)),nrow=1)
upper_m_constr <- cbind(diag(rep(1,num_beta)),-diag(rep(M,num_beta)))
lower_m_constr <- cbind(diag(rep(-1,num_beta)),-diag(rep(M,num_beta)))
model$A <- rbind(sum_z_constr,upper_m_constr,lower_m_constr)
model$obj <- c((-t(X)%*%y),rep(0,num_beta))
model$objcon <- t(y)%*%y
Q <- matrix(0,2*num_beta,2*num_beta)
Q[(1:num_beta),(1:num_beta)] <- t(X)%*%X
model$Q <- 0.5*Q
model$sense <- c(rep("<=",nrow(model$A)))
model$vtype <- c(rep("C",num_beta),rep("B",num_beta))
model$rhs <- c(k,rep(0,nrow(model$A)-1))
model$modelsense <- "min"
ans <- gurobi(model)
return(ans)
}
done <- FALSE
num_beta <- 64
k <- 8
M <- 0.01
while(!done){
print("hi")
ans <- MIQP(X,y,num_beta,k,M)
if(abs(max(ans$x[1:num_beta])) >= M){
M <- 2*M
next
}
else{
break
}
}
ans$x[1:num_beta]
return(t(v)%*%v)
norm_2 <- function(v){
return(t(v)%*%v)
}
beta_0 <- beta_real
pred_error <- function(X,beta_hat,beta_0){
estimate <- X%*%beta_hat
truth <- X%*%beta_0
error <- estimate-truth
numerator <- norm_2(error)
denominator <- norm_2(truth)
return(numerator/denominator)
}
beta_hat <- ans$x[1:num_beta]
beta_0 <- beta_real
pred_error <- function(X,beta_hat,beta_0){
estimate <- X%*%beta_hat
truth <- X%*%beta_0
error <- estimate-truth
numerator <- norm_2(error)
denominator <- norm_2(truth)
return(numerator/denominator)
}
pred_errror(X,beta_hat,beta_0)
pred_error(X,beta_hat,beta_0)
beta_0
ans$x
ans$x != 0
ans$x[ans$x != 0]
beta_hat_lasso <- onese_lambda_coef
beta_hat_MIQP <- ans$x[1:num_beta]
MIQP_error <- pred_error(X,beta_hat_MIQP,beta_0)
lasso_error <- pred_error(X,beta_hat_lasso,beta_0)
beta_hat_lasso
onese_lambda_coef<- coef(lasso)[-1]
onese_lambda_coef
onese_lambda_coef<- coef(lasso)[-1]
beta_hat_MIQP <- ans$x[1:num_beta]
beta_hat_lasso <- onese_lambda_coef
beta_0 <- beta_real
pred_error <- function(X,beta_hat,beta_0){
estimate <- X%*%beta_hat
truth <- X%*%beta_0
error <- estimate-truth
numerator <- norm_2(error)
denominator <- norm_2(truth)
return(numerator/denominator)
}
MIQP_error <- pred_error(X,beta_hat_MIQP,beta_0)
lasso_error <- pred_error(X,beta_hat_lasso,beta_0)
lasso_error
MIQP_error
df <- data.frame(cbind(X,y))
fit_lasso_cv <- cv.glmnet(X, y, alpha = 1)
lasso <- glmnet(X,y, alpha = 1, lambda = fit_lasso_cv$lambda.min)
min_lambda_coef<- coef(lasso)[-1]
length(which(min_lambda_coef!=0))
beta_hat_lasso <- min_lambda_coef
MIQP_error <- pred_error(X,beta_hat_MIQP,beta_0)
lasso_error <- pred_error(X,beta_hat_lasso,beta_0)
MIQP_error
lasso_error
lasso_min <- glmnet(X,y, alpha = 1, lambda = fit_lasso_cv$lambda.min)
min_lambda_coef<- coef(lasso_min)[-1]
length(which(min_lambda_coef!=0))
onese_lambda_coef<- coef(lasso_1se)[-1]
lasso_1se<- glmnet(X,y, alpha = 1, lambda = fit_lasso_cv$lambda.1se)
onese_lambda_coef<- coef(lasso_1se)[-1]
length(which(onese_lambda_coef!=0))
beta_hat_1se_lasso <- onese_lambda_coef
beta_hat_1se_lasso
min_lasso_error <- pred_error(X,beta_hat_min_lasso,beta_0)
onese_lasso_error <- pred_error(X,beta_hat_1se_lasso,beta_0)
beta_hat_min_lasso <- min_lambda_coef
min_lasso_error <- pred_error(X,beta_hat_min_lasso,beta_0)
onese_lasso_error <- pred_error(X,beta_hat_1se_lasso,beta_0)
onese_lasso_error
names(error_vec) <- c("MIQP","Min_Lasso","1SE_Lasso")
error_vec <- c(MIQP_error,min_lasso_error,onese_lasso_error)
library(glmnet)
library(gurobi)
library(knitr)
load("data.Rdata")
df <- data.frame(cbind(X,y))
fit_lasso_cv <- cv.glmnet(X, y, alpha = 1)
#Lasso min lambda
lasso_min <- glmnet(X,y, alpha = 1, lambda = fit_lasso_cv$lambda.min)
min_lambda_coef<- coef(lasso_min)[-1]
length(which(min_lambda_coef!=0))
#Lasso onese lambda
lasso_1se<- glmnet(X,y, alpha = 1, lambda = fit_lasso_cv$lambda.1se)
onese_lambda_coef<- coef(lasso_1se)[-1]
length(which(onese_lambda_coef!=0))
##Function to estimate betas using MIQP
MIQP <- function(X,y,num_beta,k,M){
model <- list()
sum_z_constr <- matrix(c(rep(0,num_beta),rep(1,num_beta)),nrow=1)
upper_m_constr <- cbind(diag(rep(1,num_beta)),-diag(rep(M,num_beta)))
lower_m_constr <- cbind(diag(rep(-1,num_beta)),-diag(rep(M,num_beta)))
model$A <- rbind(sum_z_constr,upper_m_constr,lower_m_constr)
model$obj <- c((-t(X)%*%y),rep(0,num_beta))
model$objcon <- t(y)%*%y
Q <- matrix(0,2*num_beta,2*num_beta)
Q[(1:num_beta),(1:num_beta)] <- t(X)%*%X
model$Q <- 0.5*Q
model$sense <- c(rep("<=",nrow(model$A)))
model$vtype <- c(rep("C",num_beta),rep("B",num_beta))
model$rhs <- c(k,rep(0,nrow(model$A)-1))
model$modelsense <- "min"
ans <- gurobi(model)
return(ans)
}
##Solve MIPQ repeatedly
done <- FALSE
num_beta <- 64
k <- 8
M <- 0.01
while(!done){
ans <- MIQP(X,y,num_beta,k,M)
if(abs(max(ans$x[1:num_beta])) >= M){
M <- 2*M
next
}
else{
break
}
}
##Helper function to get the error
norm_2 <- function(v){
return(t(v)%*%v)
}
##Function to get the error
pred_error <- function(X,beta_hat,beta_0){
estimate <- X%*%beta_hat
truth <- X%*%beta_0
error <- estimate-truth
numerator <- norm_2(error)
denominator <- norm_2(truth)
return(numerator/denominator)
}
##Find the errors for each regression
beta_hat_MIQP <- ans$x[1:num_beta]
beta_hat_min_lasso <- min_lambda_coef
beta_hat_1se_lasso <- onese_lambda_coef
beta_0 <- beta_real
MIQP_error <- pred_error(X,beta_hat_MIQP,beta_0)
min_lasso_error <- pred_error(X,beta_hat_min_lasso,beta_0)
onese_lasso_error <- pred_error(X,beta_hat_1se_lasso,beta_0)
error_vec <- c(MIQP_error,min_lasso_error,onese_lasso_error)
names(error_vec) <- c("MIQP","Min_Lasso","1SE_Lasso")
kable(error_vec)
##Find the errors for each regression
beta_hat_MIQP <- ans$x[1:num_beta]
beta_hat_min_lasso <- min_lambda_coef
beta_hat_1se_lasso <- onese_lambda_coef
beta_0 <- beta_real
MIQP_error <- pred_error(X,beta_hat_MIQP,beta_0)
min_lasso_error <- pred_error(X,beta_hat_min_lasso,beta_0)
onese_lasso_error <- pred_error(X,beta_hat_1se_lasso,beta_0)
error_vec <- c(MIQP_error,min_lasso_error,onese_lasso_error)
names(error_vec) <- c("MIQP","Min_Lasso","1SE_Lasso")
error_df <- data.frame(error_vec)
kable(error_vec)
##Find the errors for each regression
beta_hat_MIQP <- ans$x[1:num_beta]
beta_hat_min_lasso <- min_lambda_coef
beta_hat_1se_lasso <- onese_lambda_coef
beta_0 <- beta_real
MIQP_error <- pred_error(X,beta_hat_MIQP,beta_0)
min_lasso_error <- pred_error(X,beta_hat_min_lasso,beta_0)
onese_lasso_error <- pred_error(X,beta_hat_1se_lasso,beta_0)
error_vec <- c(MIQP_error,min_lasso_error,onese_lasso_error)
names(error_vec) <- c("MIQP","Min_Lasso","1SE_Lasso")
error_df <- data.frame(error_vec)
kable(error_df)
##Find the errors for each regression
beta_hat_MIQP <- ans$x[1:num_beta]
beta_hat_min_lasso <- min_lambda_coef
beta_hat_1se_lasso <- onese_lambda_coef
beta_0 <- beta_real
MIQP_error <- pred_error(X,beta_hat_MIQP,beta_0)
min_lasso_error <- pred_error(X,beta_hat_min_lasso,beta_0)
onese_lasso_error <- pred_error(X,beta_hat_1se_lasso,beta_0)
error_vec <- c(MIQP_error,min_lasso_error,onese_lasso_error)
names(error_vec) <- c("MIQP","Min_Lasso","1SE_Lasso")
error_df <- data.frame(error_vec)
colnames(error_df) <- "Error"
kable(error_df)
df <- data.frame(cbind(X,y))
fit_lasso_cv <- cv.glmnet(X, y, alpha = 1)
#Lasso min lambda
lasso_min <- glmnet(X,y, alpha = 1, lambda = fit_lasso_cv$lambda.min)
min_lambda_coef<- coef(lasso_min)[-1]
nonzero_min <- length(which(min_lambda_coef!=0))
#Lasso onese lambda
lasso_1se<- glmnet(X,y, alpha = 1, lambda = fit_lasso_cv$lambda.1se)
onese_lambda_coef<- coef(lasso_1se)[-1]
nonzero_onese <-length(which(onese_lambda_coef!=0))
##Solve MIPQ repeatedly
done <- FALSE
num_beta <- 64
k <- 8
M <- 0.01
while(!done){
ans <- MIQP(X,y,num_beta,k,M)
if(abs(max(ans$x[1:num_beta])) >= M){
M <- 2*M
next
}
else{
break
}
}
##Solve MIPQ repeatedly
done <- FALSE
num_beta <- 64
k <- 8
M <- 0.01
while(!done){
ans <- MIQP(X,y,num_beta,k,M)
if(abs(max(ans$x[1:num_beta])) >= M){
M <- 2*M
next
}
else{
break
}
}
##Function to estimate betas using MIQP
MIQP <- function(X,y,num_beta,k,M){
model <- list()
sum_z_constr <- matrix(c(rep(0,num_beta),rep(1,num_beta)),nrow=1)
upper_m_constr <- cbind(diag(rep(1,num_beta)),-diag(rep(M,num_beta)))
lower_m_constr <- cbind(diag(rep(-1,num_beta)),-diag(rep(M,num_beta)))
model$A <- rbind(sum_z_constr,upper_m_constr,lower_m_constr)
model$obj <- c((-t(X)%*%y),rep(0,num_beta))
model$objcon <- t(y)%*%y
Q <- matrix(0,2*num_beta,2*num_beta)
Q[(1:num_beta),(1:num_beta)] <- t(X)%*%X
model$Q <- 0.5*Q
model$sense <- c(rep("<=",nrow(model$A)))
model$vtype <- c(rep("C",num_beta),rep("B",num_beta))
model$rhs <- c(k,rep(0,nrow(model$A)-1))
model$modelsense <- "min"
model.setParam( 'OutputFlag', FALSE )
ans <- gurobi(model)
return(ans)
}
##Solve MIPQ repeatedly
done <- FALSE
num_beta <- 64
k <- 8
M <- 0.01
while(!done){
ans <- MIQP(X,y,num_beta,k,M)
if(abs(max(ans$x[1:num_beta])) >= M){
M <- 2*M
next
}
else{
break
}
}
##Function to estimate betas using MIQP
MIQP <- function(X,y,num_beta,k,M){
model <- list()
sum_z_constr <- matrix(c(rep(0,num_beta),rep(1,num_beta)),nrow=1)
upper_m_constr <- cbind(diag(rep(1,num_beta)),-diag(rep(M,num_beta)))
lower_m_constr <- cbind(diag(rep(-1,num_beta)),-diag(rep(M,num_beta)))
model$A <- rbind(sum_z_constr,upper_m_constr,lower_m_constr)
model$obj <- c((-t(X)%*%y),rep(0,num_beta))
model$objcon <- t(y)%*%y
Q <- matrix(0,2*num_beta,2*num_beta)
Q[(1:num_beta),(1:num_beta)] <- t(X)%*%X
model$Q <- 0.5*Q
model$sense <- c(rep("<=",nrow(model$A)))
model$vtype <- c(rep("C",num_beta),rep("B",num_beta))
model$rhs <- c(k,rep(0,nrow(model$A)-1))
model$modelsense <- "min"
ans <- gurobi(model)
return(ans)
}
##Solve MIPQ repeatedly
done <- FALSE
num_beta <- 64
k <- 8
M <- 0.01
while(!done){
ans <- MIQP(X,y,num_beta,k,M)
if(abs(max(ans$x[1:num_beta])) >= M){
M <- 2*M
next
}
else{
break
}
}
nonzero_MIQP <- length(ans$x[ans$x[1:num_beta] != 0])
##Coefficient of the best solution from MIQP
ans$x[1:num_beta]
nonzero_MIQP <- length(ans$x[ans$x[1:num_beta] != 0])
nonzero_MIQP <- length(ans$x[ans$x[1:num_beta] != 0])
num_nonzero <- c(nonzero_MIQP,nonzero_min,nonzero_onese)
num_nonzero_df <- data.frame(num_nonzero)
colnames(num_nonzero_df) <- c("Non-zero coefficient")
rownames(num_nonzero_df) <- c("MIQP","Min_Lasso","1se_Lasso")
num_nonzero_df
nonzero_MIQP <- length(ans$x[ans$x[1:num_beta] != 0])
num_nonzero <- c(nonzero_MIQP,nonzero_min,nonzero_onese)
num_nonzero_df <- data.frame(num_nonzero)
colnames(num_nonzero_df) <- c("Non-zero coefficient")
rownames(num_nonzero_df) <- c("MIQP","Min_Lasso","1se_Lasso")
kable(num_nonzero_df)
library(glmnet)
library(gurobi)
library(knitr)
load("data.Rdata")
df <- data.frame(cbind(X,y))
fit_lasso_cv <- cv.glmnet(X, y, alpha = 1)
#Lasso min lambda
lasso_min <- glmnet(X,y, alpha = 1, lambda = fit_lasso_cv$lambda.min)
min_lambda_coef<- coef(lasso_min)[-1]
nonzero_min <- length(which(min_lambda_coef!=0))
#Lasso onese lambda
lasso_1se<- glmnet(X,y, alpha = 1, lambda = fit_lasso_cv$lambda.1se)
onese_lambda_coef<- coef(lasso_1se)[-1]
nonzero_onese <-length(which(onese_lambda_coef!=0))
##Function to estimate betas using MIQP
MIQP <- function(X,y,num_beta,k,M){
model <- list()
sum_z_constr <- matrix(c(rep(0,num_beta),rep(1,num_beta)),nrow=1)
upper_m_constr <- cbind(diag(rep(1,num_beta)),-diag(rep(M,num_beta)))
lower_m_constr <- cbind(diag(rep(-1,num_beta)),-diag(rep(M,num_beta)))
model$A <- rbind(sum_z_constr,upper_m_constr,lower_m_constr)
model$obj <- c((-t(X)%*%y),rep(0,num_beta))
model$objcon <- t(y)%*%y
Q <- matrix(0,2*num_beta,2*num_beta)
Q[(1:num_beta),(1:num_beta)] <- t(X)%*%X
model$Q <- 0.5*Q
model$sense <- c(rep("<=",nrow(model$A)))
model$vtype <- c(rep("C",num_beta),rep("B",num_beta))
model$rhs <- c(k,rep(0,nrow(model$A)-1))
model$modelsense <- "min"
ans <- gurobi(model)
return(ans)
}
##Solve MIPQ repeatedly
done <- FALSE
num_beta <- 64
k <- 8
M <- 0.01
while(!done){
ans <- MIQP(X,y,num_beta,k,M)
if(abs(max(ans$x[1:num_beta])) >= M){
M <- 2*M
next
}
else{
break
}
}
ans$x[1:num_beta]
nonzero_MIQP <- length(ans$x[ans$x[1:num_beta] != 0])
num_nonzero <- c(nonzero_MIQP,nonzero_min,nonzero_onese)
num_nonzero_df <- data.frame(num_nonzero)
colnames(num_nonzero_df) <- c("Number Non-zero coefficient")
rownames(num_nonzero_df) <- c("MIQP","Min_Lasso","1se_Lasso")
kable(num_nonzero_df)
sum(ans$x[1:num_beta]!=0)
nonzero_MIQP <- length(ans$x[ans$x[1:num_beta] != 0])
num_nonzero <- c(nonzero_MIQP,nonzero_min,nonzero_onese)
num_nonzero_df <- data.frame(num_nonzero)
colnames(num_nonzero_df) <- c("Number Non-zero coefficient")
rownames(num_nonzero_df) <- c("MIQP","Min_Lasso","1se_Lasso")
kable(num_nonzero_df)
(ans$x[ans$x[1:num_beta] != 0])
sol <- ans$x[1:num_beta]
nonzero_MIQP <- length(sol[sol!= 0])
num_nonzero <- c(nonzero_MIQP,nonzero_min,nonzero_onese)
num_nonzero_df <- data.frame(num_nonzero)
colnames(num_nonzero_df) <- c("Number Non-zero coefficient")
rownames(num_nonzero_df) <- c("MIQP","Min_Lasso","1se_Lasso")
kable(num_nonzero_df)

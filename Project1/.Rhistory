num_row <- length(1:max(M))
face_val_vec = rep(100, length(P))
A<- matrix(0,nrow= num_row,ncol= length(P))
for(i in 1:num_row){
coupon <- (M >= i)*C
face_val <- (M == i)*face_val_vec
temp <- coupon + face_val
A[i,] <- temp
}
return(A)
}
get_Z <- function(M){
num_row <- length(1:max(M))
Z_1 <- -diag(num_row)
Z_2 <- ifelse((row(Z_1)-col(Z_1))==1 & (row(Z_1)>col(Z_1)),1,0)
Z <- Z_1+Z_2
return(Z)
}
A <- cbind(get_A(M,C),get_Z(M))
num_row <- length(1:max(M))
signs <- rep("=", num_row)
ans <- lp("min",P,A,signs,L)
return(ans$solution)
}
get_answer <- function(P,C,M,L){
###Input: M,C, Output:A
get_A <- function(M, C){
num_row <- length(1:max(M))
face_val_vec = rep(100, length(P))
A<- matrix(0,nrow= num_row,ncol= length(P))
for(i in 1:num_row){
coupon <- (M >= i)*C
face_val <- (M == i)*face_val_vec
temp <- coupon + face_val
A[i,] <- temp
}
return(A)
}
get_Z <- function(M){
num_row <- length(1:max(M))
Z_1 <- -diag(num_row)
Z_2 <- ifelse((row(Z_1)-col(Z_1))==1 & (row(Z_1)>col(Z_1)),1,0)
Z <- Z_1+Z_2
return(Z)
}
A <- cbind(get_A(M,C),get_Z(M))
num_row <- length(1:max(M))
signs <- rep("=", num_row)
ans <- lp("min",P,A,signs,L)
return(ans$solution)
}
get_answer(P,C,M,L)
A
get_A <- function(M, C){
num_row <- length(1:max(M))
face_val_vec = rep(100, length(P))
A<- matrix(0,nrow= num_row,ncol= length(P))
for(i in 1:num_row){
coupon <- (M >= i)*C
face_val <- (M == i)*face_val_vec
temp <- coupon + face_val
A[i,] <- temp
}
return(A)
}
A <- cbind(get_A(M,C),get_Z(M))
num_row <- length(1:max(M))
signs <- rep("=", num_row)
A
signs
ans <- lp("min",P,A,signs,L)
ans$direction
ans$objective
ans$objval
ans$solution
ans$constraints
get_A <- function(M, C){
num_row <- length(1:max(M))
face_val_vec = rep(100, length(P))
A<- matrix(0,nrow= num_row,ncol= length(P))
for(i in 1:num_row){
coupon <- (M >= i)*C
face_val <- (M == i)*face_val_vec
temp <- coupon + face_val
A[i,] <- temp
}
return(A)
}
get_answer <- function(P,C,M,L){
###Input: M,C, Output:A
get_A <- function(M, C){
num_row <- length(1:max(M))
face_val_vec = rep(100, length(P))
A<- matrix(0,nrow= num_row,ncol= length(P))
for(i in 1:num_row){
coupon <- (M >= i)*C
face_val <- (M == i)*face_val_vec
temp <- coupon + face_val
A[i,] <- temp
}
return(A)
}
get_Z <- function(M){
num_row <- length(1:max(M))
Z_1 <- -diag(num_row-1)
#Z_2 <- ifelse((row(Z_1)-col(Z_1))==1 & (row(Z_1)>col(Z_1)),1,0)
#Z <- Z_1+Z_2
return(Z_1)
}
A <- cbind(get_A(M,C),get_Z(M))
num_row <- length(1:max(M))
signs <- rep("=", num_row)
ans <- lp("min",P,A,signs,L)
return(ans$solution)
}
get_answer(P,C,M,L)
get_answer <- function(P,C,M,L){
###Input: M,C, Output:A
get_A <- function(M, C){
num_row <- length(1:max(M))
face_val_vec = rep(100, length(P))
A<- matrix(0,nrow= num_row,ncol= length(P))
for(i in 1:num_row){
coupon <- (M >= i)*C
face_val <- (M == i)*face_val_vec
temp <- coupon + face_val
A[i,] <- temp
}
return(A)
}
get_Z <- function(M){
num_row <- length(1:max(M))
Z_1 <- -diag(num_row)
#Z_2 <- ifelse((row(Z_1)-col(Z_1))==1 & (row(Z_1)>col(Z_1)),1,0)
#Z <- Z_1+Z_2
return(Z_1)
}
A <- cbind(get_A(M,C),get_Z(M))
num_row <- length(1:max(M))
signs <- rep("=", num_row)
ans <- lp("min",P,A,signs,L)
return(ans$solution)
}
get_answer(P,C,M,L)
#library(lpSolveAPI)
# setting parameters for example portfolio
p = c(102,99,101,98,98,104,100,101,102,94) # price
c = c(5,3.5,5,3.5,4,9,6,8,9,7) # coupon
m = c(1,2,2,3,4,5,5,6,7,8) # maturity
l = c(12000,18000,20000,20000,16000,15000,12000,10000) # liabilities (RHS)
install.packages(lpSolverAPI)
install.packages("lpSolverAPI")
library(lpSolveAPI)
install.packages("lpSolveAPI")
library(lpSolveAPI)
# setting parameters for example portfolio
p = c(102,99,101,98,98,104,100,101,102,94) # price
c = c(5,3.5,5,3.5,4,9,6,8,9,7) # coupon
m = c(1,2,2,3,4,5,5,6,7,8) # maturity
l = c(12000,18000,20000,20000,16000,15000,12000,10000) # liabilities (RHS)
num.constraints = length(l) # set num of constraints to length of liabilities
num.bonds = length(c) # set num of bonds to length of coupons
my.lp = make.lp(num.constraints, num.bonds+num.constraints-1) # constraints, variables
check = matrix(0, num.constraints, num.bonds+num.constraints-1) # matrix to check that values are correctly inputted
z.mat = diag(-1, num.constraints, num.constraints-1) # initialize z mat and assign -1 to current year excess cash
z.mat[col(z.mat) == row(z.mat)-1] = 1 # assign 1 to previous year excess cash
z = 1
for(i in (num.bonds+1):(num.bonds+num.constraints-1)) { # loop to add z's to columns
set.column(my.lp, i, z.mat[,z])
check[,i] = z.mat[,z]
z = z + 1
}
for(bond in (1:num.bonds)){ # loop to add columns for x variables
maturity = m[bond] # set maturity to year the bond matures
col = rep(0, num.constraints) # assign all variables 0's
col[1:maturity] = c[bond] # assign coupons for all eligible years
col[maturity] = (100 + c[bond]) # assign 100 + coupon value at maturity
set.column(my.lp, bond, col) # set column
check[, bond] = col
}
set.objfn(my.lp, c(p, rep(0, num.constraints-1)))
set.constr.type(my.lp, rep("=", num.constraints))
set.rhs(my.lp, l)
solve(my.lp)
Z
z.mat
Z_1
Z
Z[,-1]
Z[,-2]
Z[,1:num_row-1]
get_answer <- function(P,C,M,L){
###Input: M,C, Output:A
get_A <- function(M, C){
num_row <- length(1:max(M))
face_val_vec = rep(100, length(P))
A<- matrix(0,nrow= num_row,ncol= length(P))
for(i in 1:num_row){
coupon <- (M >= i)*C
face_val <- (M == i)*face_val_vec
temp <- coupon + face_val
A[i,] <- temp
}
return(A)
}
get_Z <- function(M){
num_row <- length(1:max(M))
Z_1 <- -diag(num_row)
Z_2 <- ifelse((row(Z_1)-col(Z_1))==1 & (row(Z_1)>col(Z_1)),1,0)
Z <- Z_1+Z_2
Z <- Z[,1:num_row-1]
return(Z)
}
A <- cbind(get_A(M,C),get_Z(M))
num_row <- length(1:max(M))
signs <- rep("=", num_row)
ans <- lp("min",P,A,signs,L)
return(ans$solution)
}
get_answer <- function(P,C,M,L){
###Input: M,C, Output:A
get_A <- function(M, C){
num_row <- length(1:max(M))
face_val_vec = rep(100, length(P))
A<- matrix(0,nrow= num_row,ncol= length(P))
for(i in 1:num_row){
coupon <- (M >= i)*C
face_val <- (M == i)*face_val_vec
temp <- coupon + face_val
A[i,] <- temp
}
return(A)
}
get_Z <- function(M){
num_row <- length(1:max(M))
Z_1 <- -diag(num_row)
Z_2 <- ifelse((row(Z_1)-col(Z_1))==1 & (row(Z_1)>col(Z_1)),1,0)
Z <- Z_1+Z_2
Z <- Z[,1:num_row-1]
return(Z)
}
A <- cbind(get_A(M,C),get_Z(M))
num_row <- length(1:max(M))
signs <- rep("=", num_row)
ans <- lp("min",P,A,signs,L)
return(ans$solution)
}
get_answer(P,C,M,L)
get_answer <- function(P,C,M,L){
###Input: M,C, Output:A
get_A <- function(M, C){
num_row <- length(1:max(M))
face_val_vec = rep(100, length(P))
A<- matrix(0,nrow= num_row,ncol= length(P))
for(i in 1:num_row){
coupon <- (M >= i)*C
face_val <- (M == i)*face_val_vec
temp <- coupon + face_val
A[i,] <- temp
}
return(A)
}
get_Z <- function(M){
num_row <- length(1:max(M))
Z_1 <- -diag(num_row)
Z_2 <- ifelse((row(Z_1)-col(Z_1))==1 & (row(Z_1)>col(Z_1)),1,0)
Z <- Z_1+Z_2
Z <- Z[,1:num_row-1]
return(Z)
}
A <- cbind(get_A(M,C),get_Z(M))
num_row <- length(1:max(M))
signs <- rep("=", num_row)
ans <- lp("min",P,A,signs,L)
return(A)
}
get_answer(P,C,M,L)
get.variables(my.lp) # get optimal variables
maturity
Z1.mat
z.mat
check
library(lpSolveAPI)
# setting parameters for example portfolio
p = c(102,99,101,98,98,104,100,101,102,94) # price
c = c(5,3.5,5,3.5,4,9,6,8,9,7) # coupon
m = c(1,2,2,3,4,5,5,6,7,8) # maturity
l = c(12000,18000,20000,20000,16000,15000,12000,10000) # liabilities (RHS)
num.constraints = length(l) # set num of constraints to length of liabilities
num.bonds = length(c) # set num of bonds to length of coupons
my.lp = make.lp(num.constraints, num.bonds+num.constraints-1) # constraints, variables
check = matrix(0, num.constraints, num.bonds+num.constraints-1) # matrix to check that values are correctly inputted
z.mat = diag(-1, num.constraints, num.constraints-1) # initialize z mat and assign -1 to current year excess cash
z.mat[col(z.mat) == row(z.mat)-1] = 1 # assign 1 to previous year excess cash
z = 1
for(i in (num.bonds+1):(num.bonds+num.constraints-1)) { # loop to add z's to columns
set.column(my.lp, i, z.mat[,z])
check[,i] = z.mat[,z]
z = z + 1
}
for(bond in (1:num.bonds)){ # loop to add columns for x variables
maturity = m[bond] # set maturity to year the bond matures
col = rep(0, num.constraints) # assign all variables 0's
col[1:maturity] = c[bond] # assign coupons for all eligible years
col[maturity] = (100 + c[bond]) # assign 100 + coupon value at maturity
set.column(my.lp, bond, col) # set column
check[, bond] = col
}
set.objfn(my.lp, c(p, rep(0, num.constraints-1)))
set.constr.type(my.lp, rep("=", num.constraints))
set.rhs(my.lp, l)
solve(my.lp)
c
check
get.variables(my.lp) # get optimal variables
my.lp
get.constraints(my.lp)
et_A <- function(M, C){
num_row <- length(1:max(M))
face_val_vec = rep(100, length(P))
A<- matrix(0,nrow= num_row,ncol= length(P))
for(i in 1:num_row){
coupon <- (M >= i)*C
face_val <- (M == i)*face_val_vec
temp <- coupon + face_val
A[i,] <- temp
}
return(A)
}
get_Z <- function(M){
num_row <- length(1:max(M))
Z_1 <- -diag(num_row)
Z_2 <- ifelse((row(Z_1)-col(Z_1))==1 & (row(Z_1)>col(Z_1)),1,0)
Z <- Z_1+Z_2
Z <- Z[,1:num_row-1]
return(Z)
}
A <- cbind(get_A(M,C),get_Z(M))
get_A <- function(M, C){
num_row <- length(1:max(M))
face_val_vec = rep(100, length(P))
A<- matrix(0,nrow= num_row,ncol= length(P))
for(i in 1:num_row){
coupon <- (M >= i)*C
face_val <- (M == i)*face_val_vec
temp <- coupon + face_val
A[i,] <- temp
}
return(A)
}
get_Z <- function(M){
num_row <- length(1:max(M))
Z_1 <- -diag(num_row)
Z_2 <- ifelse((row(Z_1)-col(Z_1))==1 & (row(Z_1)>col(Z_1)),1,0)
Z <- Z_1+Z_2
Z <- Z[,1:num_row-1]
return(Z)
}
A <- cbind(get_A(M,C),get_Z(M))
C <- c(5,3.5,5,3.5,4,9,6,8,9,7)
P <- c(102,99,101,98,98,104,100,101,102,94)
M <- c(1,2,2,3,4,5,5,6,7,8)
L <- c(12000,18000,20000,20000,16000,15000,12000,10000)
A <- cbind(get_A(M,C),get_Z(M))
num_row <- length(1:max(M))
set.mat(A)
set.mat(A,i=c(1:8),j=(length(P)+num_row-1))
A
for(i in 1:ncol(A)){
set.column(lpmodel,i,A[,i])
}
lpmodel<-make.lp(num_row,(length(P)+num_row-1))
for(i in 1:ncol(A)){
set.column(lpmodel,i,A[,i])
}
set.constr.value(lpmodel,L)
set.objfn(lpmodel,P)
set.objfn(lpmodel,c(P,rep(0,num_row-1)))
solve(lpmodel)
get.variables(lpmodel)
get.column(lpmodel)
c(P,rep(0,num_row-1))
L
lpmodel$column
lpmodel$rhs
lpmodel<-make.lp(num_row,(length(P)+num_row-1))
for(i in 1:ncol(A)){
set.column(lpmodel,i,A[,i])
}
set.constr.value(lpmodel,L)
set.objfn(lpmodel,c(P,rep(0,num_row-1)))
solve(lpmodel)
get.objective(lpmodel)
lpmodel<-make.lp(num_row,(length(P)+num_row-1))
for(i in 1:ncol(A)){
set.column(lpmodel,i,A[,i])
}
set.rhs(lpmodel,L)
set.constr.type(lpmodel, rep("=", num_row))
set.objfn(lpmodel,c(P,rep(0,num_row-1)))
solve(lpmodel)
get.variables(lpmodel)
library(lpSolve)
C <- c(5,3.5,5,3.5,4,9,6,8,9,7)
M <- c(1,2,2,3,4,5,5,6,7,8)
P <- c(102,99,101,98,98,104,100,101,102,94)
L <- c(12000,18000,20000,20000,16000,15000,12000,10000)
get_answer <- function(P,C,M,L){
###Input: M,C, Output:A
get_A <- function(M, C){
num_row <- length(1:max(M))
face_val_vec = rep(100, length(P))
A<- matrix(0,nrow= num_row,ncol= length(P))
for(i in 1:num_row){
coupon <- (M >= i)*C
face_val <- (M == i)*face_val_vec
temp <- coupon + face_val
A[i,] <- temp
}
return(A)
}
get_Z <- function(M){
num_row <- length(1:max(M))
Z_1 <- -diag(num_row)
Z_2 <- ifelse((row(Z_1)-col(Z_1))==1 & (row(Z_1)>col(Z_1)),1,0)
Z <- Z_1+Z_2
Z <- Z[,1:num_row]
return(Z)
}
A <- cbind(get_A(M,C),get_Z(M))
num_row <- length(1:max(M))
signs <- rep("=", num_row)
ans <- lp("min",P,A,signs,L)
return(A)
}
lpmodel<-make.lp(num_row,(length(P)+num_row))
for(i in 1:ncol(A)){
set.column(lpmodel,i,A[,i])
}
set.rhs(lpmodel,L)
set.constr.type(lpmodel, rep("=", num_row))
set.objfn(lpmodel,c(P,rep(0,num_row)))
solve(lpmodel)
get.variables(lpmodel)
dedicate_g1 = function (p,c,m,l) { # function that takes in bond portfolio parameters and returns a .lp object
num.constraints = length(l) # set num of constraints to length of liabilities
num.bonds = length(c) # set num of bonds to length of coupons
my.lp = make.lp(num.constraints, num.bonds+num.constraints-1) # constraints, variables
check = matrix(0, num.constraints, num.bonds+num.constraints-1) # matrix to check that values are correctly inputted
z.mat = diag(-1, num.constraints, num.constraints-1) # initialize z mat and assign -1 to current year excess cash
z.mat[col(z.mat) == row(z.mat)-1] = 1 # assign 1 to previous year excess cash
z = 1
for(i in (num.bonds+1):(num.bonds+num.constraints-1)) { # loop to add z's to columns
set.column(my.lp, i, z.mat[,z])
check[,i] = z.mat[,z]
z = z + 1
}
for(bond in (1:num.bonds)){ # loop to add columns for x variables
maturity = m[bond] # set maturity to year the bond matures
col = rep(0, num.constraints) # assign all variables 0's
col[1:maturity] = c[bond] # assign coupons for all eligible years
col[maturity] = (100 + c[bond]) # assign 100 + coupon value at maturity
set.column(my.lp, bond, col) # set column
check[, bond] = col
}
set.objfn(my.lp, c(p, rep(0, num.constraints-1)))
set.constr.type(my.lp, rep("=", num.constraints))
set.rhs(my.lp, l)
return(my.lp)
}
# testing function on example portfolio
old_port = dedicate_g1(p,c,m,l)
solve(old_port)
get.variables(old_port) # looks right
get.objective(old_port) # looks right
library(lpSolve)
C <- c(5,3.5,5,3.5,4,9,6,8,9,7)
M <- c(1,2,2,3,4,5,5,6,7,8)
P <- c(102,99,101,98,98,104,100,101,102,94)
L <- c(12000,18000,20000,20000,16000,15000,12000,10000)
get_answer <- function(P,C,M,L){
###Input: M,C, Output:A
get_A <- function(M, C){
num_row <- length(1:max(M))
face_val_vec = rep(100, length(P))
A<- matrix(0,nrow= num_row,ncol= length(P))
for(i in 1:num_row){
coupon <- (M >= i)*C
face_val <- (M == i)*face_val_vec
temp <- coupon + face_val
A[i,] <- temp
}
return(A)
}
get_Z <- function(M){
num_row <- length(1:max(M))
Z_1 <- -diag(num_row)
Z_2 <- ifelse((row(Z_1)-col(Z_1))==1 & (row(Z_1)>col(Z_1)),1,0)
Z <- Z_1+Z_2
Z <- Z[,1:num_row]
return(Z)
}
A <- cbind(get_A(M,C),get_Z(M))
num_row <- length(1:max(M))
signs <- rep("=", num_row)
ans <- lp("min",c(P,rep(0,num_row)),A,signs,L)
return(ans)
}
get_answer(P,C,M,L)
a <- get_answer(P,C,M,L)
a
a$solution
